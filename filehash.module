<?php
// $Id$

/**
 * @file
 * Generate hashes for each file.
 */

/**
 * Implements hook_menu().
 */
function filehash_menu() {
  $items['admin/config/media/filehash'] = array(
    'title' => 'File hash',
    'description' => 'Configure file hash settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filehash_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'filehash.admin.inc',
  );
  return $items;
}

/**
 * Returns array of enabled hash algorithms.
 */
function filehash_algos() {
  return array_diff(variable_get('filehash_algos', array('sha256')), array(0));
}

/**
 * Implements hook_file_delete().
 */
function filehash_file_delete($file) {
  db_delete('filehash')
    ->condition('fid', $file->fid)
    ->execute();
}

/**
 * Implements hook_file_insert().
 */
function filehash_file_insert($file) {
  filehash_save($file);
}

/**
 * Implements hook_file_load().
 */
function filehash_file_load($files) {
  $algos = filehash_algos();
  $result = db_select('filehash')
    ->fields('filehash')
    ->condition('fid', array_keys($files), 'IN')
    ->execute();
  foreach ($result as $record) {
    foreach ($algos as $algo) {
      $files[$record->fid]->filehash[$algo] = $record->$algo;
    }
  }
  // Generate hash if it does not already exist for the file.
  foreach ($files as $fid => $file) {
    foreach ($algos as $algo) {
      if (empty($file->filehash[$algo])) {
        filehash_save($files[$fid]);
        break;
      }
    }
  }
}

/**
 * Implements hook_file_update().
 */
function filehash_file_update($file) {  
  filehash_save($file);
}

/**
 * Implements hook_node_view().
 */
function filehash_node_view($node, $view_mode) {
  // Add <media:hash> elements for at most one file per RSS item.
  if ($view_mode == 'rss') {
    // The following field types are currently supported.
    $field_types = array('file' => 1, 'image' => 1, 'media' => 1);
    foreach ($node->content as $field) {
      if (isset($field_types[$field['#field_type']]) && !empty($field['#access'])) {
        foreach ($field['#items'] as $file) {
          if ($field['#field_type'] == 'media') {
            foreach ($file->file as $language) {
              foreach ($language as $delta) {
                if ($delta['display']) {
                  filehash_rss_elements($delta, $node);  
                  break 4;
                }
              }
            }
          }
          elseif ($file['display']) {
            filehash_rss_elements($file, $node);  
            break 2;
          }
        }
      }
    }
  }
}

/**
 * Adds <media:hash> RSS elements to $node object.
 */
function filehash_rss_elements(array $file, $node) {
  $algos = array('md5' => 'md5', 'sha1' => 'sha-1');
  foreach ($algos as $hash => $algo) {
    if (!empty($file['filehash'][$hash])) {
      $node->rss_elements[] = array(
        'key' => 'media:hash',
        'attributes' => array('algo' => $algo),
        'value' => $file['filehash'][$hash],
      );
    }
  }
  $node->rss_namespaces['xmlns:media'] = 'http://search.yahoo.com/mrss/';
}

/**
 * Calculates and saves the file hashes.
 */
function filehash_save($file) {
  $file->filehash = array_fill_keys(array('md5', 'sha1', 'sha256'), '');
  foreach (filehash_algos() as $algo) {
    $file->filehash[$algo] = hash_file($algo, $file->uri);
  }
  db_merge('filehash')
    ->key(array('fid' => $file->fid))
    ->fields($file->filehash)
    ->execute();
}

/**
 * Implements hook_views_api().
 */
function filehash_views_api() {
  return array(
    'api' => 3,
  );
}
