<?php
// $Id$

/**
 * @file
 * Generate hashes for each file.
 */

/**
 * Implementation of hook_menu().
 */
function filehash_menu() {
  $items['admin/config/media/filehash'] = array(
    'title' => 'File hash',
    'description' => 'Configure file hash settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filehash_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'filehash.admin.inc',
  );
  return $items;
}

/**
 * Return array of enabled hash algorithms.
 */
function filehash_algos() {
  return array_diff(variable_get('filehash_algos', array('sha256')), array(0));
}

/**
 * Implementation of hook_file_delete().
 */
function filehash_file_delete($file) {
  db_delete('filehash')
    ->condition('fid', $file->fid)
    ->execute();
}

/**
 * Implementation of hook_file_insert().
 */
function filehash_file_insert($file) {
  filehash_save($file);
}

/**
 * Implementation of hook_file_load().
 */
function filehash_file_load($files) {
  $algos = filehash_algos();
  $result = db_select('filehash')
    ->fields('filehash')
    ->condition('fid', array_keys($files), 'IN')
    ->execute();
  foreach ($result as $record) {
    foreach ($algos as $algo) {
      $files[$record->fid]->filehash[$algo] = $record->$algo;
    }
  }
  // Generate hash if it does not already exist for the file.
  foreach ($files as $fid => $file) {
    foreach ($algos as $algo) {
      if (empty($file->filehash[$algo])) {
        filehash_save($files[$fid]);
        break;
      }
    }
  }
}

/**
 * Implementation of hook_file_update().
 */
function filehash_file_update($file) {  
  filehash_save($file);
}

/**
 * Implementation of hook_node_view().
 *
 * Add a media:hash element to RSS items.
 */
function filehash_node_view($node, $build_mode) {
  if ($build_mode == 'rss' && isset($node->files) && user_access('view uploaded files')) {
    foreach ($node->files as $file) {
      if ($file->list) {
        $algos = array('md5' => 'md5', 'sha1' => 'sha-1');
        foreach ($algos as $hash => $algo) {
          if (!empty($file->filehash[$hash])) {
            $node->rss_elements[] = array(
              'key' => 'media:hash',
              'attributes' => array('algo' => $algo),
              'value' => $file->filehash[$hash],
            );
          }
        }
        $node->rss_namespaces['xmlns:media'] = 'http://search.yahoo.com/mrss/';
        break;
      }
    }
  }
}

/**
 * Calculate and save the file hashes.
 */
function filehash_save($file) {
  $file->filehash = array_fill_keys(array('md5', 'sha1', 'sha256'), '');
  foreach (filehash_algos() as $algo) {
    $file->filehash[$algo] = hash_file($algo, $file->uri);
  }
  db_merge('filehash')
    ->key(array('fid' => $file->fid))
    ->fields($file->filehash)
    ->execute();
}
